# Copyright 2014(c) The Ontario Institute for Cancer Research. All rights reserved.

# Backend servers
{% for host in groups.portal_main %}
backend www{{ loop.index }} {
	.host = "{{ host }}";
        .port = "{{ backend_port }}";
        .probe = {
		.url = "{{ backend_url }}";
                .interval = {{ backend_interval }}s;
                .timeout = {{ backend_timeout }}s;
                .window = {{ backend_window }};
                .threshold = {{ backend_threshold }};
        }
}

{% endfor %}

# Round-robin director
director www round-robin {
{% for host in groups.portal_main %}
	{ .backend = www{{ loop.index }}; }
{% endfor %}
}

acl banners {
{% for host in banners %}
	"{{ host }}";
{% endfor %}
}

# The first VCL function executed, right after Varnish has decoded the request into its basic data structure.
# It has four main uses:
#
# - Modifying the client data to reduce cache diversity. E.g., removing any leading “www.” in a URL.
# - Deciding caching policy based on client data. E.g., Not caching POST requests, only caching specific URLs, etc
# - Executing re-write rules needed for specific web applications.
# - Deciding which Web server to use.
sub vcl_recv {
        set req.backend = www;

        /* Force banning for remote application cache coherence */
        if (req.request == "BAN") {
                if (!client.ip ~ banners) {
                        error 405 "Not allowed.";
                }

                /* This option is to clear any cached object containing the req.url */
                ban("req.url ~ "+req.url);

                error 200 "Cache cleared successfully.";
        }

        if (req.request == "GET" && req.url ~ "^/api/.*/download.*$") {
                /* Never cache downloads */
                return(pipe);
        }

        if (req.request == "GET" && req.url ~ "^/api/.*/auth.*$") {
                /* Never cache login related*/
                return(pipe);
        }

	if (req.request == "GET" && req.url ~ "^/api/short\?.*$") {
	/* Never cache short URL API */
		return(pipe);
	}

        if (req.http.X-Bypass) {
                /* Never cache bypass requests for load testing */
                return(pipe);
        }

        /* Remove cache busting cookies */

        remove req.http.Cookie;
}

# The backend-counterpart to vcl_recv. In vcl_recv you can use information
# provided by the client to decide on caching policy, while you use information provided by the server
# to further decide on a caching policy in vcl_fetch.
sub vcl_fetch {
	if (beresp.status == 200 && req.request == "GET" && req.url ~ "{{ index_url_regex }}") {
		/* Short duration for the index page */
		set beresp.ttl = {{ index_ttl }}{{ index_ttl_units }};
		set beresp.http.cache-control = "max-age={{ index_maxage }}";
	} else if (beresp.status == 200 && req.request == "GET" && req.url ~ "{{ static_url_regex }}") {
		/* Static resources */
		set beresp.ttl = {{ static_ttl }}{{ static_ttl_units }};
		set beresp.http.cache-control = "max-age={{ static_maxage }}";
	} else if (beresp.status == 200 && req.request == "GET") {
		/* Long duration for everything else that was successful */
		set beresp.ttl = {{ default_ttl }}{{ default_ttl_units }};
		set beresp.http.cache-control = "max-age={{ default_maxage }}";
	} else {
		/* No TTL on everything else */
		set beresp.ttl = 0s;
	}

	/* Prevent cookie cache-busting */
	unset beresp.http.set-cookie;
}

# While the vcl_deliver function is simple, it is also very useful for modifying the output of Varnish.
# If you need to remove or add a header that isn’t supposed to be stored in the cache, vcl_deliver
# is the place to do it.
sub vcl_deliver {
        /* For debugging */
        set resp.http.X-Served-By = server.hostname;
        if (obj.hits > 0) {
                set resp.http.X-Cache = "HIT";
                set resp.http.X-Cache-Hits = obj.hits;
        } else {
                set resp.http.X-Cache = "MISS";
        }

        return(deliver);
}
