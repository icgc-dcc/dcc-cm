# Copyright 2014(c) The Ontario Institute for Cancer Research. All rights reserved.
vcl 4.0;
import directors;
import std;

# Backend servers
{% for host in groups.portal_main %}
backend www{{ loop.index }} {
	.host = "{{ host }}";
        .port = "{{ backend_port }}";
        .probe = {
		.url = "{{ backend_url }}";
                .interval = {{ backend_interval }}s;
                .timeout = {{ backend_timeout }}s;
                .window = {{ backend_window }};
                .threshold = {{ backend_threshold }};
        }
}

{% endfor %}

sub vcl_init {
        new www = directors.round_robin();
{% for host in groups.portal_main %}
        www.add_backend(www{{ loop.index }});
{% endfor %}
}

acl banners {
{% for host in banners %}
	"{{ host }}";
{% endfor %}
}

# The first VCL function executed, right after Varnish has decoded the request into its basic data structure.
# It has four main uses:
#
# - Modifying the client data to reduce cache diversity. E.g., removing any leading “www.” in a URL.
# - Deciding caching policy based on client data. E.g., Not caching POST requests, only caching specific URLs, etc
# - Executing re-write rules needed for specific web applications.
# - Deciding which Web server to use.
sub vcl_recv {
  if (std.port(server.ip) == 5381) {
    set req.backend_hint = www.backend();

    /*
      set req.backend = member;
      set client.identity = client.ip;
    */

    /* Force banning for remote application cache coherence */
    if (req.method == "BAN") {
      if (!client.ip ~ banners) {
        return (synth(405,"Not allowed."));
      }

      /* This option is to clear any cached object containing the req.url */
      ban("req.url ~ "+req.url);

      return (synth(200,"Cache cleared successfully."));
    }

    if (req.method == "GET" && req.url ~ "^/api/.*/download.*$") {
      /* Don't reuse connection. See https://www.varnish-cache.org/docs/3.0/tutorial/vcl.html#actions pipe paragraph */
      set req.http.Connection = "close";

      /* Never cache downloads */
      return(pipe);
    }

    if (req.url ~ "^/api/.*/auth.*$") {
      /* Don't reuse connection. See https://www.varnish-cache.org/docs/3.0/tutorial/vcl.html#actions pipe paragraph */
      set req.http.Connection = "close";

      /* Never cache login related*/
      return(pipe);
    }

    if (req.method == "GET" && req.url ~ "^/api/.*/short\?.*$") {
      /* Don't reuse connection. See https://www.varnish-cache.org/docs/3.0/tutorial/vcl.html#actions pipe paragraph */
      set req.http.Connection = "close";

      /* Never cache short URL API */
      return(pipe);
    }

    if (req.url ~ "^/api/.*/analysis.*$") {
      /* Don't reuse connection. See https://www.varnish-cache.org/docs/3.0/tutorial/vcl.html#actions pipe paragraph */
      set req.http.Connection = "close";

      /* Never cache analysis path */
      return(pipe);
    }

    if (req.url ~ "^/api/.*/entityset.*$") {
      /* Don't reuse connection. See https://www.varnish-cache.org/docs/3.0/tutorial/vcl.html#actions pipe paragraph */
      set req.http.Connection = "close";

      /* Never cache analysis path */
      return(pipe);
    }

    if (req.url ~ "^/api/.*/settings.*$") {
      /* Don't reuse connection. See https://www.varnish-cache.org/docs/3.0/tutorial/vcl.html#actions pipe paragraph */
      set req.http.Connection = "close";

      /* Never cache analysis path */
      return(pipe);
    }

    if (req.url ~ "^/api/.*/repository/files.*$") {
      /* Don't reuse connection. See https://www.varnish-cache.org/docs/3.0/tutorial/vcl.html#actions pipe paragraph */
      set req.http.Connection = "close";

      /* Never cache the 'repository/files/' path */
      return(pipe);
    }

    if (req.url ~ "^/api/.*/ui/software/.*$") {
      set req.http.Connection = "close";
      return(pipe);
    }

    if (req.url ~ "^/api/.*/manifests.*$") {
      /* Don't reuse connection. See https://www.varnish-cache.org/docs/3.0/tutorial/vcl.html#actions pipe paragraph */
      set req.http.Connection = "close";

      /* Never cache manifests path */
      return(pipe);
    }

    if (req.http.X-Bypass) {
      /* Never cache bypass requests for load testing */
      return(pipe);
    }

    /* Remove cache busting cookies */
    unset req.http.Cookie;

    /* Add a unique header containing the client address */
    unset req.http.X-Forwarded-For;
    set req.http.X-Forwarded-For = client.ip;
  }
}

# The backend-counterpart to vcl_recv. In vcl_recv you can use information
# provided by the client to decide on caching policy, while you use information provided by the server
# to further decide on a caching policy in vcl_fetch.
sub vcl_backend_response {
  if (beresp.status == 200 && bereq.method == "GET" && bereq.url ~ "^/(index\.html)?$") {
    /* Short duration for the index page */
    set beresp.ttl = 1m;
    set beresp.http.cache-control = "max-age=0";
  } else if (beresp.status == 200 && bereq.method == "GET" && bereq.url ~ "^/(vendor|styles|scripts|views)/.*$") {
    /* Static resources */
    set beresp.ttl = 1h;
    set beresp.http.cache-control = "max-age=3600";
  } else if (beresp.status == 200 && bereq.method == "GET") {
    /* Long duration for everything else that was successful */
    set beresp.ttl = 30d;
    set beresp.http.cache-control = "max-age=3600";
  } else {
    /* No TTL on everything else */
    set beresp.ttl = 0s;
  }

  /* Prevent cookie cache-busting */
  unset beresp.http.set-cookie;
}

# While the vcl_deliver function is simple, it is also very useful for modifying the output of Varnish.
# If you need to remove or add a header that isn’t supposed to be stored in the cache, vcl_deliver
# is the place to do it.
sub vcl_deliver {
  /* For debugging */
  set resp.http.X-Served-By = server.hostname;
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
    set resp.http.X-Cache-Hits = obj.hits;
  } else {
    set resp.http.X-Cache = "MISS";
  }

  return(deliver);
}
