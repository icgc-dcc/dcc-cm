################################################################################
# Install submission server
################################################################################

# Prepare the file system for installation
- name: Create file system
  file: "path={{ item }} state=directory"
  with_items:
    - "{{ install_dir }}"
    - "{{ data_dir }}"
    - "{{ staging_dir }}"

- name: Download the reference genome
  get_url: "url={{ reference_genome_url }} dest={{ staging_dir }}/{{ reference_genome_archive }} mode=0444"

- name: Extract the reference genome
  unarchive: src={{ staging_dir }}/{{ reference_genome_archive }} dest={{ data_dir }} copy=no

- name: Symlink the reference genome files
  file: src="{{ data_dir }}/{{ reference_genome_filename }}.{{ item }}"
        dest="{{ data_dir }}/{{ reference_genome_basename }}.{{ item }}"
        state=link
  with_items:
    - "dict"
    - "fasta"

- name: Download the distribution
  get_url: "url={{ dist_url }} dest={{ staging_dir }}/{{ dist_archive }} mode=0444"

- name: Extract the dist 
  command: "tar xzf {{ staging_dir }}/{{ dist_archive }} --strip 1 -C {{ install_dir }}" 

- name: Configure application
  template: src=application.conf.j2 dest="{{ conf_dir }}/application.conf"

- name: Download Shiro password utility
  get_url: "url={{ shiro_url }} dest={{ staging_dir }}/password.jar"

- name: Generate password hash
  shell: "java -jar {{ staging_dir }}/password.jar -f shiro1 -a SHA-256 -i 500000 -gs '{{ admin_password }}'"
  register: password_hash
- set_fact: "admin_password_hash={{ password_hash.stdout }}"

- name: Create users, passwords and roles
  template: src=realm.ini.j2 dest="{{ conf_dir }}/realm.ini"

- name: Install service
  command: "{{ bin_dir }}/dcc-submission-server install creates=/etc/init.d/dcc-submission-server"
  
- name: Ensure daemon is running
  service: name=dcc-submission-server state=started

################################################################################
# Bootstrap submission to have a release environment
################################################################################
- name: Make sure curl is there
  apt: pkg=curl state=installed

- name: Interpolate and copy script
  template: src=init.sh.j2 dest={{ bin_dir }}/init.sh mode=0744

- name: Assign init command to variable
  set_fact: init_command="{{ bin_dir }}/init.sh {{ external_submission_url }} http://localhost:{{ http_port }} {{ admin_username }} {{ admin_password }} Release1 project1 Project1 Project1"
  
- name: Initialize the system
  shell: "{{ init_command }}"
  register: initLog

- debug: msg="{{ initLog.stdout }}"
