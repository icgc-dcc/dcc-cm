################################################################################
# Brings up DCC ETL pipeline:
#
# - Initial hosts allocation
# - Provision Openstack instances and divide into logical groups
# - Create and distribute custom host files for openstack
# - Install Postgresql database server
# - Install ICGC DCC schemas
# - Provision DCC Identifier
# - Provision MongoDB server
# - Provision ElasticSearch server
# - Copy reference data to worker nodes
# - Install LZO on worker nodes
# - Provision Cloudera Manager
#
# - >>> Manually provision the cluster through Cloudera Manager <<<
#
# - Install packages on main ETL Node
# - Install etl scripts, reference data on ETL node
# - Install annotator on main ETL node
# - Install reference data for annotator
# - Patch scripts and configuration files for openstack environment
# - Bootstrap dcc-genome on mongodb server
# - Install exporter on main ETL node
# - Install downloader and its workflows into the cluster
#
#
# Note the playbook makes assumptions of which one of hadoop nodes
# is the jobtracker, name-node, quorum..etc
#
# Usage:
#   ./runAnsible etl_main.yml <tags>
#
################################################################################



################################################################################
#
# Post provisioning steps: Do these before starting an ETL run 
#
# - Copy projects' submission files to hdfs
# - Create project.json configuration
# - Download the dictionary for the ETL run
# - Download codelist for the ETL run??
# 
# 
# FIXME: not a good way to handle this
# 1) Patch exporter setenv.sh 
#   - The datatype declaration should only contain the data types that we have, otherwise 
#     the dynamic exporter will throw an exception and halt the overarching script. This
#     is difficult to do programmatically as we don't know that projects have what types.
#
# 2) (Re)create oozie workflow for coordinator (archivecleaner)
#   - Goto a oozie server
#   - Copy job.properties from HDFS     hadoop fs -copyToLocal /user/downloader/workflows/archivecleaner-main/job.properties job.properties
#   - Get job id if exists     oozie jobs -oozie http://localhost:11000/oozie -jobtype coordinator
#   - Kill job if exists       oozie job -oozie http://localhost:11000/oozie -kill <Coordinator job_id from above>
#   - Install coordinator      oozie job -oozie http://localhost:11000/oozie -config job.properties -submit
#   - Start coordinator        oozie job -oozie http://localhost:11000/oozie -start <New coordinator job_id>
#
################################################################################

- name: Generate initial hosts
  hosts: localhost
  gather_facts: False
  tasks:
    - name: "Adding host"
      add_host: name="{{ server_prefix }}-etl-postgres" 
                groups=group_01
    - name: "Adding host"
      add_host: name="{{ server_prefix }}-etl-identifier" 
                groups=group_02
    - name: "Adding host"
      add_host: name="{{ server_prefix }}-etl-cm" 
                groups=group_03
    - name: "Adding host"
      add_host: name="{{ item }}" 
                groups=group_04
      with_sequence: count=4 
                     format="{{ server_prefix }}-etl-worker-%02x"
    - name: "Adding host"
      add_host: name="{{ server_prefix }}-etl-mongo" 
                groups=group_05
    - name: "Adding host"
      add_host: name="{{ server_prefix }}-etl-main" 
                groups=group_06
    - name: "Adding host"
      add_host: name="{{ server_prefix }}-etl-elasticsearch" 
                groups=group_07
    - name: "Adding host"
      add_host: name="{{ server_prefix }}-etl-test" 
                groups=group_08
  tags:
    - launch
    - debug

- name: Create Openstack host file
  hosts: localhost
  gather_facts: False
  tasks:
    - name: "Remove previous host file if exist"
      shell: rm -f bootstrap_hosts
      delegate_to: localhost
    - name: "Create new host file with localhost entry"
      shell: echo "127.0.0.1 localhost" > bootstrap_hosts
      delegate_to: localhost
  tags:
    - launch
    - debug


################################################################################
#           Start creating OpenStack instances.                                #
################################################################################

- name: Provision OpenStack Instance for postgres
  hosts: group_01
  user: root
  gather_facts: False
  vars_files:
    - "vars/main.yml"
  tasks:
    - include: tasks/create-instances.yml
    - name: Add public ip to hostgroup
      add_host: name={{ data.public_ip }} 
                groups=postgres,all_instances 
                hostname={{ inventory_hostname }}
  tags:
    - launch
    - debug


- name: Provision OpenStack Instance for identifier
  hosts: group_02
  user: root
  gather_facts: False
  vars_files:
    - "vars/main.yml"
  tasks:
    - include: tasks/create-instances.yml
    - name: Add public ip to hostgroup
      add_host: name={{ data.public_ip }} 
                groups=identifier,all_instances 
                hostname={{ inventory_hostname }}
  tags:
    - launch
    - debug


- name: Provision OpenStack Instance for manager
  hosts: group_03
  user: root
  gather_facts: False
  vars_files:
    - "vars/main.yml"
  tasks:
    - include: tasks/create-instances.yml
    - name: Add public ip to hostgroup
      add_host: name={{ data.public_ip }} 
                groups=manager,all_instances 
                hostname={{ inventory_hostname }}
    - name: Save manager's public IP for later
      set_fact: cm_host={{ data.public_ip }}
  tags:
    - launch
    - debug


- name: Provision OpenStack Instance for workers
  hosts: group_04
  user: root
  gather_facts: False
  serial: 1
  vars_files:
    - "vars/main.yml"
  tasks:
    - include: tasks/create-instances.yml
    - name: Add public ip to hostgroup
      add_host: name={{ data.public_ip }} 
                groups=workers,all_instances 
                hostname={{ inventory_hostname }}
  tags:
    - launch
    - debug


- name: Provision OpenStack Instance for mongo
  hosts: group_05
  user: root
  gather_facts: False
  vars_files:
    - "vars/main.yml"
  tasks:
    - include: tasks/create-instances.yml
    - name: Add public ip to hostgroup
      add_host: name={{ data.public_ip }} 
                groups=mongo,all_instances 
                hostname={{ inventory_hostname }}
  tags:
    - launch
    - debug


- name: Provision OpenStack Instance for etl-main
  hosts: group_06
  user: root
  gather_facts: False
  vars_files:
    - "vars/main.yml"
  tasks:
    - include: tasks/create-instances.yml
    - name: Add public ip to hostgroup
      add_host: name={{ data.public_ip }} 
                groups=main,all_instances 
                hostname={{ inventory_hostname }}
  tags:
    - launch
    - debug


- name: Provision OpenStack Instance for elasticsearch
  hosts: group_07
  user: root
  gather_facts: False
  vars_files:
    - "vars/main.yml"
  tasks:
    - include: tasks/create-instances.yml
    - name: Add public ip to hostgroup
      add_host: name={{ data.public_ip }} 
                groups=elasticsearch,all_instances 
                hostname={{ inventory_hostname }}
  tags:
    - launch
    - debug


################################################################################
#           Getting around openstack quirkyness of not having                  #
################################################################################

- name: Check if SSH is ready on servers
  hosts: all_instances
  gather_facts: False
  tasks:
    - name: Wait for ssh
      wait_for: host={{ inventory_hostname }} 
                port=22 
                timeout=900
      delegate_to: localhost
  tags:
    - launch

- name: Grab openstack node's internal IPs
  hosts: all_instances
  gather_facts: True
  serial: 1
  vars_files:
    - "vars/main.yml"
  vars:
    host_key_checking: False
    ansible_ssh_user: ubuntu
  tasks:
    - name: Writing IPs to host file
      shell: echo "{{ ansible_all_ipv4_addresses[0] }} {{ ansible_hostname }}" >> bootstrap_hosts
      delegate_to: localhost
  tags:
    - launch

- name: Replace /etc/hosts with bootstrapped hosts file
  hosts: all_instances
  sudo: True
  serial: 1
  vars_files:
    - "vars/main.yml"
  vars:
    host_key_checking: False
    ansible_ssh_user: ubuntu
  tasks:
    - name: Copying... 
      copy: src=bootstrap_hosts 
            dest=/etc/hosts 
            owner=root 
            group=root
  tags:
    - launch


################################################################################
#                           Provision each host.                               #
################################################################################


- include: etl-elasticsearch.yml
- include: etl-postgres.yml
- include: etl-identifier.yml
- include: etl-mongo.yml
- include: etl-cm.yml
- include: etl-main.yml
- include: etl-worker.yml
